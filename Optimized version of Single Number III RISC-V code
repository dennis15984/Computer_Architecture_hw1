.data
# Test case 1
nums1:      .word 1, 2, 1, 3, 2, 5
numsSize1:  .word 6
expected1_1:.word 3
expected1_2:.word 5

# Test case 2
nums2:      .word 4, 1, 2, 1, 2, 3
numsSize2:  .word 6
expected2_1:.word 3
expected2_2:.word 4

# Test case 3
nums3:      .word 10, 11, 10, 13, 14, 13, 14, 9
numsSize3:  .word 8
expected3_1:.word 9
expected3_2:.word 11

# Messages
msg_test1:  .string "Test case 1 passed\n"
msg_test2:  .string "Test case 2 passed\n"
msg_test3:  .string "Test case 3 passed\n"
msg_all:    .string "All test cases completed\n"
msg_fail:   .string "Test case failed\n"
msg_result: .string "singleNumber result: "
msg_space:  .string " "
msg_newline:.string "\n"

# Result buffer
result_buffer: .word 0, 0

.text
.globl main

# Main Function
main:
    addi sp, sp, -4
    sw ra, 0(sp)

    # Test case 1
    la a0, nums1
    lw a1, numsSize1
    la a2, expected1_1
    la a3, expected1_2
    jal ra, runTestCase

    # Test case 2
    la a0, nums2
    lw a1, numsSize2
    la a2, expected2_1
    la a3, expected2_2
    jal ra, runTestCase

    # Test case 3
    la a0, nums3
    lw a1, numsSize3
    la a2, expected3_1
    la a3, expected3_2
    jal ra, runTestCase

    # Print "All test cases completed\n"
    la a0, msg_all
    li a7, 4
    ecall

    lw ra, 0(sp)
    addi sp, sp, 4

    # Exit program
    li a7, 10
    ecall

# Function: runTestCase
runTestCase:
    addi sp, sp, -24
    sw ra, 20(sp)
    sw s0, 16(sp)
    sw s1, 12(sp)
    sw s2, 8(sp)
    sw s3, 4(sp)
    sw s4, 0(sp)

    mv s0, a0  # nums
    mv s1, a1  # numsSize
    mv s2, a2  # expected1
    mv s3, a3  # expected2

    # Call singleNumber
    la s4, result_buffer
    mv a0, s0
    mv a1, s1
    mv a2, s4
    jal ra, singleNumber

    # Print result
    la a0, msg_result
    li a7, 4
    ecall
    lw a0, 0(s4)
    li a7, 1
    ecall
    la a0, msg_space
    li a7, 4
    ecall
    lw a0, 4(s4)
    li a7, 1
    ecall
    la a0, msg_newline
    li a7, 4
    ecall

    # Verify results
    mv a0, s0
    mv a1, s1
    mv a2, s2
    mv a3, s3
    jal ra, verifyResults

    lw ra, 20(sp)
    lw s0, 16(sp)
    lw s1, 12(sp)
    lw s2, 8(sp)
    lw s3, 4(sp)
    lw s4, 0(sp)
    addi sp, sp, 24
    ret

# Function: verifyResults
verifyResults:
    addi sp, sp, -20
    sw ra, 16(sp)
    sw s0, 12(sp)
    sw s1, 8(sp)
    sw s2, 4(sp)
    sw s3, 0(sp)

    mv s0, a0          # s0 = nums
    mv s1, a1          # s1 = numsSize
    lw s2, 0(a2)       # s2 = expected1
    lw s3, 0(a3)       # s3 = expected2

    # Sort the result
    la t2, result_buffer
    lw t0, 0(t2)
    lw t1, 4(t2)
    bge t0, t1, swap_results
    j sort_ok
swap_results:
    sw t1, 0(t2)
    sw t0, 4(t2)
sort_ok:

    # Sort expected
    blt s2, s3, expected_sorted
    mv t0, s2
    mv s2, s3
    mv s3, t0
expected_sorted:

    # Compare results with expected
    la t2, result_buffer
    lw t0, 0(t2)
    lw t1, 4(t2)

    bne t0, s2, test_fail
    bne t1, s3, test_fail

    # Test passed
    lw ra, 16(sp)
    lw s0, 12(sp)
    lw s1, 8(sp)
    lw s2, 4(sp)
    lw s3, 0(sp)
    addi sp, sp, 20
    ret

test_fail:
    # Print "Test case failed\n"
    la a0, msg_fail
    li a7, 4
    ecall
    # Exit program
    li a7, 10
    ecall

# Function: singleNumber (Optimized with Loop Unrolling)
singleNumber:
    addi sp, sp, -4
    sw a0, 0(sp)  # Save original nums pointer

    li t0, 0           # xorResult
    li t1, 0           # i
    li t2, 4           # Step size for unrolled loop

    # Unrolled XOR loop (process 4 elements at a time)
xor_loop_unrolled:
    addi t3, a1, -4    # Check if we can process 4 more elements
    blt t1, t3, xor_process_4
    j xor_loop_remainder

xor_process_4:
    lw t3, 0(a0)
    lw t4, 4(a0)
    lw t5, 8(a0)
    lw t6, 12(a0)
    xor t0, t0, t3
    xor t0, t0, t4
    xor t0, t0, t5
    xor t0, t0, t6
    addi a0, a0, 16    # Move pointer by 4 elements
    addi t1, t1, 4     # Increment counter by 4
    j xor_loop_unrolled

xor_loop_remainder:
    bge t1, a1, xor_done
    lw t3, 0(a0)
    xor t0, t0, t3
    addi a0, a0, 4
    addi t1, t1, 1
    j xor_loop_remainder

xor_done:
    li t1, 1           # rightmost_set_bit
    mv t2, t0          # copy of xorResult

find_rightmost_set_bit:
    and t3, t2, t1
    bnez t3, split_numbers
    slli t1, t1, 1
    j find_rightmost_set_bit

split_numbers:
    li t2, 0           # num1
    li t3, 0           # num2
    lw a0, 0(sp)       # Restore original nums pointer
    li t4, 0           # i

split_loop:
    bge t4, a1, split_done
    lw t5, 0(a0)
    and t6, t5, t1
    beqz t6, update_num2
    xor t2, t2, t5
    j continue_split
update_num2:
    xor t3, t3, t5
continue_split:
    addi a0, a0, 4
    addi t4, t4, 1
    j split_loop

split_done:
    sw t2, 0(a2)
    sw t3, 4(a2)
    addi sp, sp, 4     # Restore stack pointer
    ret
