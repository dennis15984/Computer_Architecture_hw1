.data
fabsf_msg: .string "Absolute value of -5.75: "
clz_msg: .string "Leading zeros in 15728640: "
fp16_msg: .string "Half-precision value 0x3C00 to float: "
success_msg: .string "All tests passed successfully!\n"
fail_msg: .string "Test failed: "
abs_error: .string "Incorrect absolute value\n"
clz_error: .string "Incorrect leading zero count\n"
fp_error: .string "Incorrect half-precision to float conversion\n"
newline: .string "\n"

.text
.globl main

main:
    # Initialize values
    li a0, 0xC0B80000       # -5.75f in IEEE 754 format
    li a1, 0x00F00000       # x = 15728640 (0x00F00000)
    li a2, 0x3C00           # h = 0x3C00

    # Test fabsf
    jal ra, fabsf
    mv s0, a0               # Save result
    
    # Print fabsf result
    la a0, fabsf_msg
    li a7, 4
    ecall
    mv a0, s0
    li a7, 2                # Print float
    ecall
    la a0, newline
    li a7, 4
    ecall

    # Check fabsf result
    li t0, 0x40B80000       # Expected: 5.75f
    bne s0, t0, abs_fail

    # Test my_clz
    mv a0, a1
    jal ra, my_clz
    mv s1, a0               # Save result

    # Print my_clz result
    la a0, clz_msg
    li a7, 4
    ecall
    mv a0, s1
    li a7, 1                # Print integer
    ecall
    la a0, newline
    li a7, 4
    ecall

    # Check my_clz result
    li t0, 8                # Expected: 8
    bne s1, t0, clz_fail

    # Test fp16_to_fp32
    mv a0, a2
    jal ra, fp16_to_fp32
    mv s2, a0               # Save result

    # Print fp16_to_fp32 result
    la a0, fp16_msg
    li a7, 4
    ecall
    mv a0, s2
    li a7, 34               # Print in hexadecimal
    ecall
    la a0, newline
    li a7, 4
    ecall

    # Check fp16_to_fp32 result
    li t0, 0x3F800000       # Expected: 0x3F800000 (1.0f)
    bne s2, t0, fp_fail

    # All tests passed
    la a0, success_msg
    li a7, 4
    ecall
    j exit

abs_fail:
    la a0, fail_msg
    li a7, 4
    ecall
    la a0, abs_error
    li a7, 4
    ecall
    j exit

clz_fail:
    la a0, fail_msg
    li a7, 4
    ecall
    la a0, clz_error
    li a7, 4
    ecall
    j exit

fp_fail:
    la a0, fail_msg
    li a7, 4
    ecall
    la a0, fp_error
    li a7, 4
    ecall
    j exit

exit:
    li a7, 10
    ecall

# Function: fabsf
fabsf:
    lui t0, 0x7FFFF
    and a0, a0, t0
    ret

# Function: my_clz
my_clz:
    li t0, 0        # Initialize count to 0
    li t1, 0x80000000 # Mask starting with the leftmost bit

clz_loop:
    and t2, a0, t1  # Check if the current bit is set
    bnez t2, clz_end # If bit is set, we're done
    addi t0, t0, 1  # Increment count
    srli t1, t1, 1  # Shift mask right
    bnez t1, clz_loop # Continue if we haven't checked all bits

clz_end:
    mv a0, t0       # Move result to a0
    ret

# Function: fp16_to_fp32
fp16_to_fp32:
    # Extract sign bit
    srli t0, a0, 15
    slli t0, t0, 31  # sign << 31

    # Extract exponent
    li t1, 0x7C00
    and t1, a0, t1   # exponent mask
    srli t1, t1, 10  # shift to get actual exponent value

    # Extract mantissa
    li t2, 0x03FF
    and t2, a0, t2   # mantissa mask

    # Check for special cases
    li t3, 0x7C00
    beq t1, t3, handle_special  # If exponent is all 1s, it's Inf or NaN

    # Normal or subnormal number
    beqz t1, handle_subnormal   # If exponent is 0, it's subnormal or zero

    # Handle normal number
    addi t1, t1, 112  # Adjust exponent bias (127 - 15)
    slli t1, t1, 23   # Position exponent
    slli t2, t2, 13   # Position mantissa

    # Combine components
    or a0, t0, t1     # Combine sign and exponent
    or a0, a0, t2     # Add mantissa
    ret

handle_special:
    li t4, 0x7F800000  # Inf in single precision
    or a0, t0, t4      # Preserve sign for Inf
    bnez t2, set_nan   # If mantissa is non-zero, it's NaN
    ret

set_nan:
    li t4, 0x00400000  # Set a bit in mantissa to ensure it's NaN
    or a0, a0, t4
    ret

handle_subnormal:
    beqz t2, return_signed_zero  # If mantissa is also 0, return signed zero
    # Normalize subnormal number
    li t3, 1
    li t4, 10
normalize_loop:
    slli t2, t2, 1
    addi t4, t4, -1
    bge t2, t3, end_normalize
    bnez t4, normalize_loop
end_normalize:
    addi t1, t4, 112  # Adjust exponent
    slli t1, t1, 23   # Position exponent
    srli t2, t2, 1    # Adjust mantissa
    slli t2, t2, 13   # Position mantissa
    or a0, t0, t1     # Combine sign and exponent
    or a0, a0, t2     # Add mantissa
    ret

return_signed_zero:
    mv a0, t0         # Just return the sign bit (0 or 0x80000000)
    ret    
